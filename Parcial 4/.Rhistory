arroots <- function(object)
{
if(!("Arima" %in% class(object)) &
!("ar" %in% class(object)))
stop("object must be of class Arima or ar")
if("Arima" %in% class(object))
parvec <- object$model$phi
else
parvec <- object$ar
if(length(parvec) > 0)
{
last.nonzero <- max(which(abs(parvec) > 1e-08))
if (last.nonzero > 0)
return(structure(list(
roots=polyroot(c(1,-parvec[1:last.nonzero])),
type="AR"),
class='armaroots'))
}
return(structure(list(roots=numeric(0), type="AR"),
class='armaroots'))
}
# Compute MA roots
maroots <- function(object)
{
if(!("Arima" %in% class(object)))
stop("object must be of class Arima")
parvec <- object$model$theta
if(length(parvec) > 0)
{
last.nonzero <- max(which(abs(parvec) > 1e-08))
if (last.nonzero > 0)
return(structure(list(
roots=polyroot(c(1,parvec[1:last.nonzero])),
type="MA"),
class='armaroots'))
}
return(structure(list(roots=numeric(0), type="MA"),
class='armaroots'))
}
plot.armaroots <- function(x, xlab="Real", ylab="Imaginary",
main=paste("Inverse roots of", x$type,
"characteristic polynomial"),
...)
{
oldpar <- par(pty='s')
on.exit(par(oldpar))
plot(c(-1,1), c(-1,1), xlab=xlab, ylab=ylab,
type="n", bty="n", xaxt="n", yaxt="n", main=main, ...)
axis(1, at=c(-1,0,1), line=0.5, tck=-0.025)
axis(2, at=c(-1,0,1), label=c("-i","0","i"),
line=0.5, tck=-0.025)
circx <- seq(-1,1,l=501)
circy <- sqrt(1-circx^2)
lines(c(circx,circx), c(circy,-circy), col='gray')
lines(c(-2,2), c(0,0), col='gray')
lines(c(0,0), c(-2,2), col='gray')
if(length(x$roots) > 0)
{
inside <- abs(x$roots) > 1
points(1/x$roots[inside], pch=19, col='black')
if(sum(!inside) > 0)
points(1/x$roots[!inside], pch=19, col='red')
}
}
datos <- read.csv("Nacidos_Vivos_en_Hospital_Manuel_Uribe_Angel.csv")
datos$FECHA.NACIMIENTO <- gsub(" \\d+:\\d+:\\d+ .*", "", datos$FECHA.NACIMIENTO)
datos$FECHA.NACIMIENTO <- as.Date(datos$FECHA.NACIMIENTO, format = "%m/%d/%Y")
datos <- datos %>%
mutate(Anio = year(FECHA.NACIMIENTO), semana = week(FECHA.NACIMIENTO)) %>%
group_by(Anio, semana) %>%
summarise(ratio = sum(SEXO != "MASCULINO")/sum(SEXO == "MASCULINO"))
lambda <- forecast::BoxCox.lambda(datos$ratio)
datos$ratio <- forecast::BoxCox(datos$ratio, lambda)
pacf(datos$ratio)
acf(datos$ratio)
x = datos$ratio
plot(x, type = "l")
mod <- forecast::auto.arima(datos$ratio)
summary(mod)
library(forecast)
fit <- mod
par(mfrow=c(1,2))
plot(arroots(fit),main="Inverse AR roots")
plot(maroots(fit),main="Inverse MA roots")
# Probemos con una bd de conteo de niños.
datos <- read.csv("Nacidos_Vivos_en_Hospital_Manuel_Uribe_Angel.csv")
datos$FECHA.NACIMIENTO <- gsub(" \\d+:\\d+:\\d+ .*", "", datos$FECHA.NACIMIENTO)
datos$FECHA.NACIMIENTO <- as.Date(datos$FECHA.NACIMIENTO, format = "%m/%d/%Y")
# otra veez, porque soy imbecil
datos.total.kids = datos[order(datos$FECHA.NACIMIENTO),]
datos.total.kids = datos.total.kids %>% mutate(Anio = year(FECHA.NACIMIENTO), semana = week(FECHA.NACIMIENTO)) %>%group_by(Anio, semana) %>%
summarise(total.kids = sum(SEXO == 'MASCULINO')+sum(SEXO !='MASCULINO')  )
#Miremos que salió
datos %>% head() # Hay muchas variables.
plot(datos.total.kids$total.kids, type = 'l') # se ve mas chimbita
b=auto.arima(datos.total.kids$total.kids) # tiene mas sentido
b
pacf(datos.total.kids$total.kids)
acf(datos.total.kids$total.kids)
fit <- b
par(mfrow=c(1,2))
plot(arroots(fit),main="Inverse AR roots")
plot(maroots(fit),main="Inverse MA roots")
HW1 <- HoltWinters(dftimeserie)
f_fit <- forecast(HW1)
autoplot(dftimeserie, series="Datos") +
autolayer(HW1$fitted, series="Modelo auto.arima ") +
autolayer(f_fit, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production", xlim=c(2013,2018))
lines(HW1$fitted[,1], lty=2, col="blue")
lines(HW2$fitted[,1], lty=2, col="red")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production", xlim=c(2013,2018))
lines(HW2$fitted[,1], lty=2, col="red")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
HW1.pred <- predict(HW1, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dfts, ylab="candy production", xlim=c(2008.5,2020))
HW1.pred <- predict(HW1, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dfts, ylab="candy production")
HW2 <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="blue")
HW2 <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
HW2 <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
HW2 <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
HW2 <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
HW2 <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="blue")
HW2 <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="blue")
lines(HW2[,1], col="red")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="blue")
lines(HW2[,1], col="red")
HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="blue")
lines(HW2.pred[,1], col="red")
lines(HW2.pred[,2], lty=2, col="orange")
lines(HW2.pred[,3], lty=2, col="orange")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="blue")
lines(HW2.pred[,1], col="red")
lines(HW2.pred[,2], lty=2, col="orange")
lines(HW2.pred[,3], lty=2, col="orange")
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0, beta = 0, gamma = 0))
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2ensayo$fitted[,1], lty=2, col="red")
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0, beta = 0, gamma = 0))
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2ensayo$fitted[,1], lty=2, col="red")
coef(HW2ensayo)
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
coef(HW2)
HW1 <- HoltWinters(dftimeserie)
coef(HW1)
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2ensayo$fitted[,1], lty=2, col="red")
coef(HW2ensayo)
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2ensayo$fitted[,1], lty=2, col="red")
coef(HW2ensayo)
HW1 <- HoltWinters(dftimeserie)
f_fit <- forecast(HW1)
autoplot(dftimeserie, series="Datos") +
autolayer(HW1$fitted, series="Modelo auto.arima ") +
autolayer(f_fit, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2$fitted[,1], lty=2, col="red")
HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="blue")
lines(HW2.pred[,1], col="red")
lines(HW2.pred[,2], lty=2, col="orange")
lines(HW2.pred[,3], lty=2, col="orange")
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
#Visually evaluate the fits
plot(dftimeserie, ylab="candy production")
lines(HW2ensayo$fitted[,1], lty=2, col="red")
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
#Visually evaluate the fits
plot(dftimeserie, ylab="marranos")
lines(HW2ensayo$fitted[,1], lty=2, col="red")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
#Visually evaluate the fits
plot(dftimeserie, ylab="marranos")
lines(HW2$fitted[,1], lty=2, col="red")
legend("Total de sacrifios 2008-2022")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2$fitted, series="Modelo auto.arima ") +
autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
#HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
HW2.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2$fitted, series="Modelo auto.arima ") +
autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2 <- HoltWinters(dftimeserie)
#HW2.pred <- predict(HW2, 24, prediction.interval = TRUE, level=0.95)
HW2.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2$fitted, series="Modelo auto.arima ") +
autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
HW2.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2$fitted, series="Modelo auto.arima ") +
autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
accuracy(HW2ensayo)
accuracy(HW2ensayo$fitted)
accuracy(HW2ensayo$fitted)
summary(HW2ensayo)
summary(HW2ensayo$fitted)
# Custom HoltWinters fitting
HW2ensayo <- hw(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
# Custom HoltWinters fitting
HW2ensayo <- hw(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
summary(HW2ensayo)
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
summary(HW2ensayo)
accuracy(HW2ensayo)
accuracy(HW2ensayo$fitted)
accuracy(HW2ensayo.pred)
# Custom HoltWinters fitting
HW2ensayo <- hw(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
# Custom HoltWinters fitting
HW2ensayo <- hw(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
# Custom HoltWinters fitting
HW2ensayo <- hw(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2ensayo <- HoltWinters(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2ensayo <- hw(dftimeserie,  optim.start = c(alpha = 0.33, beta = 0.33, gamma = 0.33))
HW2ensayo.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2 <- hw(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
HW2.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2$fitted, series="Modelo auto.arima ") +
autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
HW1 <- hw(dftimeserie)
f_fit <- forecast(HW1)
autoplot(dftimeserie, series="Datos") +
autolayer(HW1$fitted, series="Modelo auto.arima ") +
autolayer(f_fit, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
accuracy(list(mod1,prueba ),
plotit=TRUE)
accuracy(c(mod1,prueba),
plotit=TRUE)
model_comp <- data.frame(mod1 = accuracy[1:7],
prueba = accuracy[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp <- data.frame(accuracy(mod1)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7]
row.names = c("ME", "RMSE",
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
colnames("mod1")
row.names = c("ME", "RMSE",
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
colnames("mod1"),
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
colnames(model_comp) <- c('mod1','prueba','p2','HW1','HW2','HW2ensayo')
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
colnames(model_comp) <- c('mod1','prueba','p2','HW1','HW2','HW2ensayo')
model_comp
train <- window(dftimeserie, start=time(dftimeserie)[1],
end = time(dftimeserie)[length(dftimeserie) - 12])
test <- window(dftimeserie, start = time(dftimeserie)[length(dftimeserie)
- 12 + 1],
end = time(dftimeserie)[length(dftimeserie)])
train
checkresiduals(mod1)
shapiro.test(mod1$residuals)
jarque.bera.test(mod1$residuals)
require(tseries)
jarque.bera.test(mod1$residuals)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
prueba = Arima(dftimeserie, order = c(0,1,1),
seasonal = list(order = c(0,1,0),period =12))
checkresiduals(prueba)
shapiro.test(prueba$residuals)
jarque.bera.test(prueba$residuals)
qqnorm(prueba$residuals)
qqline(prueba$residuals)
checkresiduals(HW1)
shapiro.test(HW1$residuals)
jarque.bera.test(HW1$residuals)
qqnorm(HW1)
qqnorm(HW1$residuals)
qqline(HW1$residuals)
plot(dftimeserie)
requiere(tsoutliers())
require(tsoutliers)
require(tsoutliers)
require(tsoutliers)
mod_outliers <- tso(dftimeserie, delta=0.7)
mod_outliers
require(tsoutliers)
mod_outliers <- tso(dftimeserie, delta=0.7)
mod_outliers
require(tsoutliers)
mod_outliers <- tso(dftimeserie, delta=0.3)
mod_outliers
