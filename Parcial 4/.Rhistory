model_comp <- data.frame(mod1 = accuracy[1:7],
prueba = accuracy[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp <- data.frame(accuracy(mod1)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7]
row.names = c("ME", "RMSE",
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
colnames("mod1")
row.names = c("ME", "RMSE",
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
colnames("mod1"),
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
colnames(model_comp) <- c('mod1','prueba','p2','HW1','HW2','HW2ensayo')
model_comp
model_comp <- data.frame(accuracy(mod1)[1:7],
accuracy(prueba)[1:7],
accuracy(p2)[1:7],
accuracy(HW1)[1:7],
accuracy(HW2)[1:7],
accuracy(HW2ensayo)[1:7],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE", "MASE",
"ACF1"))
colnames(model_comp) <- c('mod1','prueba','p2','HW1','HW2','HW2ensayo')
model_comp
train <- window(dftimeserie, start=time(dftimeserie)[1],
end = time(dftimeserie)[length(dftimeserie) - 12])
test <- window(dftimeserie, start = time(dftimeserie)[length(dftimeserie)
- 12 + 1],
end = time(dftimeserie)[length(dftimeserie)])
train
checkresiduals(mod1)
shapiro.test(mod1$residuals)
jarque.bera.test(mod1$residuals)
require(tseries)
jarque.bera.test(mod1$residuals)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
prueba = Arima(dftimeserie, order = c(0,1,1),
seasonal = list(order = c(0,1,0),period =12))
checkresiduals(prueba)
shapiro.test(prueba$residuals)
jarque.bera.test(prueba$residuals)
qqnorm(prueba$residuals)
qqline(prueba$residuals)
checkresiduals(HW1)
shapiro.test(HW1$residuals)
jarque.bera.test(HW1$residuals)
qqnorm(HW1)
qqnorm(HW1$residuals)
qqline(HW1$residuals)
plot(dftimeserie)
requiere(tsoutliers())
require(tsoutliers)
require(tsoutliers)
require(tsoutliers)
mod_outliers <- tso(dftimeserie, delta=0.7)
mod_outliers
require(tsoutliers)
mod_outliers <- tso(dftimeserie, delta=0.7)
mod_outliers
require(tsoutliers)
mod_outliers <- tso(dftimeserie, delta=0.3)
mod_outliers
knitr::opts_chunk$set(echo = TRUE)
require(dplyr)
require(lmtest)
require(tseries)
require(TSA)
require(astsa)
require(tsoutliers)
require(kableExtra)
require(tidyverse)
require(ggplot2)
require(hrbrthemes)
require(tsoutliers)
require(TSstudio)
require(forecast)
require(latticeExtra)
require(datetime)
library(lubridate)
require(forecast)
library(readxl)
require(forecast)
require(readr)
require(janitor)
# fn para calcular las raices unitarias y graficas bien chimbita
arroots <- function(object)
{
if(!("Arima" %in% class(object)) &
!("ar" %in% class(object)))
stop("object must be of class Arima or ar")
if("Arima" %in% class(object))
parvec <- object$model$phi
else
parvec <- object$ar
if(length(parvec) > 0)
{
last.nonzero <- max(which(abs(parvec) > 1e-08))
if (last.nonzero > 0)
return(structure(list(
roots=polyroot(c(1,-parvec[1:last.nonzero])),
type="AR"),
class='armaroots'))
}
return(structure(list(roots=numeric(0), type="AR"),
class='armaroots'))
}
# Compute MA roots
maroots <- function(object)
{
if(!("Arima" %in% class(object)))
stop("object must be of class Arima")
parvec <- object$model$theta
if(length(parvec) > 0)
{
last.nonzero <- max(which(abs(parvec) > 1e-08))
if (last.nonzero > 0)
return(structure(list(
roots=polyroot(c(1,parvec[1:last.nonzero])),
type="MA"),
class='armaroots'))
}
return(structure(list(roots=numeric(0), type="MA"),
class='armaroots'))
}
plot.armaroots <- function(x, xlab="Real", ylab="Imaginary",
main=paste("Inverse roots of", x$type,
"characteristic polynomial"),
...)
{
oldpar <- par(pty='s')
on.exit(par(oldpar))
plot(c(-1,1), c(-1,1), xlab=xlab, ylab=ylab,
type="n", bty="n", xaxt="n", yaxt="n", main=main, ...)
axis(1, at=c(-1,0,1), line=0.5, tck=-0.025)
axis(2, at=c(-1,0,1), label=c("-i","0","i"),
line=0.5, tck=-0.025)
circx <- seq(-1,1,l=501)
circy <- sqrt(1-circx^2)
lines(c(circx,circx), c(circy,-circy), col='gray')
lines(c(-2,2), c(0,0), col='gray')
lines(c(0,0), c(-2,2), col='gray')
if(length(x$roots) > 0)
{
inside <- abs(x$roots) > 1
points(1/x$roots[inside], pch=19, col='black')
if(sum(!inside) > 0)
points(1/x$roots[!inside], pch=19, col='red')
}
}
datos <- read.csv("Nacidos_Vivos_en_Hospital_Manuel_Uribe_Angel.csv")
datos$FECHA.NACIMIENTO <- gsub(" \\d+:\\d+:\\d+ .*", "", datos$FECHA.NACIMIENTO)
datos$FECHA.NACIMIENTO <- as.Date(datos$FECHA.NACIMIENTO, format = "%m/%d/%Y")
datos <- datos %>%  mutate(Anio = year(FECHA.NACIMIENTO), semana = week(FECHA.NACIMIENTO)) %>%
group_by(Anio, semana) %>%
summarise(ratio = sum(SEXO != "MASCULINO")/sum(SEXO == "MASCULINO"))
lambda <- forecast::BoxCox.lambda(datos$ratio)
datos$ratio <- forecast::BoxCox(datos$ratio, lambda)
pacf(datos$ratio)
acf(datos$ratio)
x = datos$ratio
plot(x, type = "l")
mod <- forecast::auto.arima(datos$ratio)
summary(mod)
fit <- mod
par(mfrow=c(1,2))
plot(arroots(fit),main="Inverse AR roots")
plot(maroots(fit),main="Inverse MA roots")
df = read_delim("cerdos.csv", delim = ";", escape_double = FALSE, trim_ws = TRUE)
df = clean_names(df)
df %>% names()
df$mes %>% unique() # Se verifica que no estén repetidos valores
df$mes =as.factor(df$mes)
df$mes %>% levels# Se convierte en factor, cambia el orden
month_id = c(4,8,12,1,2,7,6,3,5,11,10,9)
levels(df$mes) = month_id
df$mes = df$mes %>% as.character()
df$dia = replicate(length(df$ano), '13')
df$ano = df$ano %>% as.character()
df$date = paste(df$dia,df$mes,df$ano,sep = '-')
df$date = as.Date(df$date, format = '%d-%m-%Y')
# Con esto, se tiene la base de datos lista para trabajar
df = df[order(df$date),] # ordenando por fecha mas vieja
# --> construct separate plots for each series
obj1 <- xyplot(sacrificios_porcinos_machos ~ date, df, type = "l" , lwd=2)
obj2 <- xyplot(sacrificio_porcinos_hembras ~ date, df, type = "l", lwd=2)
# --> Make the plot with second y axis AND legend:
doubleYScale(obj1, obj2, text = c("sacrificios_porcinos_machos", "sacrificio_porcinos_hembras") , add.ylab2 = TRUE)
x = df$date
y = df$sacrificio_totales
# plot
ggplot(df, aes(x=date,y=sacrificio_totales))+
geom_line(color = '#69b3a2', size = 1.5, alpha = 0.9)+
theme_ipsum()+
ggtitle('Total de sacrificios porcinos')
mod1 = auto.arima(df$sacrificio_totales)
mod1 %>% summary()
acf(df$sacrificio_totales)
Diferencias.modelo = na.omit(diff(df$sacrificio_totales))
acf(Diferencias.modelo)
pacf(df$sacrificio_totales)
dim(df) # La muestra es relativamente pequeña
plot(Diferencias.modelo, type = 'l') # Mejorar grafico
cerditos_2_la_venganza <- read_excel("cerditos 2 la venganza.xls",
sheet = "Cuadro 3", skip = 9)
df2 =cerditos_2_la_venganza
df2 = cerditos_2_la_venganza
df2 = df2 %>% clean_names()
df2 %>% head(3)
df2$t_cabezas = df2$t_cabezas/100000
df2$machos = df2$machos/100000
df2$hembras = df2$hembras/100000
# --> construct separate plots for each series
obj1 <- xyplot(machos ~ fecha, df2, type = "l" , lwd=2)
obj2 <- xyplot(hembras ~ fecha, df2, type = "l", lwd=2)
# --> Make the plot with second y axis AND legend:
doubleYScale(obj1, obj2, text = c("sacrificios porcinos machos", "sacrificio porcinos hembras") , add.ylab2 = TRUE)
x = df2$fecha
y = df2$t_cabezas
# plot
ggplot(df2, aes(x=fecha,y=t_cabezas))+
geom_line(color = '#69b3a2', size = 1, alpha = 0.9)+
theme_ipsum()+
ggtitle('Total de sacrificios porcinos')
df2$t_cabezas=df2$t_cabezas
vectores <- c(df2$t_cabezas)
dftimeserie <-ts(vectores, frequency = 12, start = c(2008,10))
descompuesta=decompose(dftimeserie)
plot(descompuesta)
ggseasonplot(dftimeserie,year.labels=TRUE,continuous=TRUE)
ts_seasonal((dftimeserie), type="box")
ts_seasonal(diff(dftimeserie), type="box")
ts_heatmap(diff(dftimeserie), color = "Reds")
ggseasonplot(dftimeserie, polar = TRUE)
acf(df2$t_cabezas)
acf(df2$t_cabezas %>% diff %>% na.omit, lag.max = 50)
pacf(df2$t_cabezas, lag.max = 35)
mod1 = auto.arima(df2$t_cabezas, stepwise = F, approximation = F, seasonal = T,)
checkresiduals(mod1)
par(mfrow=c(1,2))
plot(arroots(mod1),main="Inverse AR roots")
plot(maroots(mod1),main="Inverse MA roots")
shapiro.test(mod1$residuals)
jarque.bera.test(mod1$residuals)
qqnorm(mod1$residuals)
qqline(mod1$residuals)
summary(mod1)
# prediccion auto.arima
f_fit <- forecast(mod1)
autoplot(ts(df2$t_cabezas), series="Datos") +
autolayer(mod1$fitted, series="Modelo auto.arima ") +
autolayer(f_fit, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
x = df2$t_cabezas
mod2 = arima(x, order = c(0,1,1))
mod3 = arima(x, order = c(1,1,1))
mod4 = arima(x, order = c(1,1,2))
mod5 = arima(x, order = c(2,1,1))
mod6 = arima(x, order = c(2,1,2))
mod7 = arima(x, order = c(3,1,1))
mod8 = arima(x, order = c(3,1,2))
mod9 = arima(x, order = c(1,1,3))
mod10 = arima(x, order = c(3,1,3))
cbind(AIC(mod1,mod2,mod3,mod4,mod5,mod6,
mod7,mod8,mod9,mod10),BIC(mod1,mod2,mod3,mod4,mod5,mod6,
mod7,mod8,mod9,mod10)[2])
load('256modelos.Rdata')
prueba = Arima(dftimeserie, order = c(1,0,1),
seasonal = list(order = c(0,1,0),period =12))
checkresiduals(prueba)
par(mfrow=c(1,2))
plot(arroots(prueba),main="Inverse AR roots")
plot(maroots(prueba),main="Inverse MA roots")
shapiro.test(prueba$residuals)
jarque.bera.test(prueba$residuals)
qqnorm(prueba$residuals)
qqline(prueba$residuals)
summary(prueba)
f_fit <- forecast(prueba)
autoplot(dftimeserie, series="Datos") +
autolayer(prueba$fitted, series="SARIMA(1,0,1)(0,1,0)[12] ") +
autolayer(f_fit, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2 <- hw(dftimeserie, alpha=0.2, beta=0.1, gamma=0.1)
HW2.pred <- forecast(HW2)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2$fitted, series="Modelo auto.arima ") +
autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
# Custom HoltWinters fitting
HW2ensayo <- hw(dftimeserie,  optim.start = c(alpha = 0, beta = 0, gamma = 0))
HW2ensayo.pred <- forecast(HW2ensayo)
#Visually evaluate the prediction
autoplot(dftimeserie, series="Datos") +
autolayer(HW2ensayo$fitted, series="Modelo auto.arima ") +
autolayer(HW2ensayo.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
model_comp <- data.frame(accuracy(mod1)[1:6],
accuracy(prueba)[1:6],
accuracy(HW2)[1:6],
accuracy(HW2ensayo)[1:6],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE","MASE"))
colnames(model_comp) <- c('auto.arima','Ajustado','HW1','HW2')
model_comp %>% kableExtra::kable()
df3 = df2[,1:2] # serie con la que se trabajará
n = df3$t_cabezas %>% length() # 168 observaciones
split = (n*0.8) %>% round() # se toman 134 datos
indice = df3[split,] # Fecha dividida hasta el 2019
# Division datos de entrenamiento
train = df3[1:split,] #134 datos
# Division datos de prueba
test = df3[(split+1):nrow(df3),] # 34 datos
serie.original = df2$t_cabezas
#prediccions = as.data.frame(prediccions)
s1 = train$t_cabezas # termina en septiembre del 2022 DATOS DE ENTRENAMIENTO
s2 = test$t_cabezas #
a1 = ts(s1, frequency = 12, start = c(2008,10))# ENTRENAMIENTO
a2 = ts(s2, frequency = 12, start = end(a1)) # PRUEBA
#Visually evaluate the prediction
autoplot(a1, series="Datos entrenamiento") +
autolayer(a2, series="Datos de prueba") +
#autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
mod1 = auto.arima(s1, stepwise = F, approximation = F, seasonal = T,) # ARIMA(0,1,5)
mod2 = Arima(s1, order = c(1,0,1),
seasonal = list(order = c(0,1,0),period =12)) # SARIMA (1,0,1)x(0,1,0)
mod3 <- hw(ts(train$t_cabezas, frequency = 12, start = c(2008,10)), alpha=0.2, beta=0.1, gamma=0.1,h = 34)
mod4 <- hw(ts(train$t_cabezas, frequency = 12, start = c(2008,10)),  optim.start = c(alpha = 0, beta = 0, gamma = 0), h=34)
# PREGUNTAR SI ES ASI
y = test$t_cabezas # valor de y_test; reales
a1 = forecast(mod1,h = 34) # prediccion modelo 1
y_hat1 = a1$mean
a2 = forecast(mod2,h=34)  # prediccion modelo 2
y_hat2 = a2$mean
a3 = mod3  # prediccion modelo 3
y_hat3 = a3$mean
a4 <- mod4 # prediccion modelo 4
y_hat4 <- a4$mean
mse1 = mean((y-y_hat1))^2
mse2 = mean((y-y_hat2))^2
mse3 = mean((y-y_hat3))^2
mse4 = mean((y-y_hat4))^2
tabla = cbind(c(mse1,mse2,mse3,mse4))
colnames(tabla) = c("MSE")
rownames(tabla) = c("Modelo 1","Modelo 2","Modelo 3","Modelo 4")
tabla %>% kable
model_comp <- data.frame(accuracy(mod1)[1:6],
accuracy(mod2)[1:6],
accuracy(mod3)[1:6],
accuracy(mod4)[1:6],
row.names = c("ME", "RMSE",
"MAE", "MPE",
"MAPE","MASE"))
colnames(model_comp) <- c('Modelo 1','Modelo 2','Modelo 3','Modelo 4')
model_comp %>% kableExtra::kable()
mod4$model
# prediccion HW
f_fit <- y_hat4
autoplot(dftimeserie, series="Datos") +
autolayer(mod4$fitted, series="Modelo HW fitted ") +
autolayer(f_fit, series="Prediction") +
#autolayer()+
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
f_fit <- forecast(mod4,h=34)
autoplot(dftimeserie, series="Datos") +
#autolayer(mod4$fitted, series="Modelo HW fitted ") +
autolayer(f_fit, series="Prediction") +
#autolayer()+
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
plot(dftimeserie)
mod_outliers <- tso(dftimeserie, delta=0.7)
mod_outliers
# Modelos aplicados de esta forma por menos coste computacional
mod_outliers0 <- tso(dftimeserie, delta=0)
mod_outliers1<- tso(dftimeserie, delta=0.1)
mod_outliers2 <- tso(dftimeserie, delta=0.2)
mod_outliers3<- tso(dftimeserie, delta=0.3)
mod_outliers4 <- tso(dftimeserie, delta=0.4)
mod_outliers5 <- tso(dftimeserie, delta=0.5)
mod_outliers6 <- tso(dftimeserie, delta=0.6)
mod_outliers7 <- tso(dftimeserie, delta=0.7)
mod_outliers8 <- tso(dftimeserie, delta=0.8)
mod_outliers9 <- tso(dftimeserie, delta=0.9)
mod_outliers10 <- tso(dftimeserie, delta=1)
mod_outliers0$outliers %>% kable(label = 'Delta 0')
mod_outliers1$outliers %>% kable(label = 'Delta 1')
mod_outliers2$outliers %>% kable(label = 'Delta 2')
mod_outliers3$outliers %>% kable(label = 'Delta 3')
mod_outliers4$outliers %>% kable(label = 'Delta 4')
mod_outliers5$outliers %>% kable(label = 'Delta 5')
mod_outliers6$outliers %>% kable(label = 'Delta 6')
mod_outliers7$outliers %>% kable(label = 'Delta 7')
mod_outliers8$outliers %>% kable(label = 'Delta 8')
mod_outliers9$outliers %>% kable(label = 'Delta 9')
mod_outliers10$outliers %>% kable(label = 'Delta 10')
ensayointervencio <- window(dftimeserie, start=time(dftimeserie)[1],
end = time(dftimeserie)[138])
paco = ensayointervencio %>% auto.arima(stepwise = F,approximation = F)
paco %>% summary()
modelo1superintervencion <- arimax(dftimeserie, order=c(3, 0, 0),seasonal = list(order = c(0, 1, 2)),
xtransf=data.frame( creemosquepandemia=1 *(seq_along(dftimeserie) == 139)),
transfer=list(c(1, 0)))
modelo1superintervencion %>% coeftest()
modelo1superintervencion2 <- arimax(dftimeserie, order=c(3, 0, 0),seasonal = list(order = c(0, 1, 2)),
xtransf=data.frame( creemosquepandemia=1 *(seq_along(dftimeserie) == 139)),
transfer=list(c(0, 0)))
modelo1superintervencion2 %>% coeftest()
modelo1superintervencion2 %>% checkresiduals()
modelo1superintervencion2$residuals %>% shapiro.test()
qqnorm(modelo1superintervencion2$residuals)
qqline(modelo1superintervencion2$residuals)
modelo1superintervencion2
reg1 <- stats::filter(1 * (seq.int(length(dftimeserie) + 12)== 139),
filter =0, method = "rec",
sides = 1)
xreg <- cbind(I1=stats::filter(1*(seq_along(dftimeserie) == 139),method = "rec",sides = 1,filter = 0))
modelo_intervenido <-arima(dftimeserie, order = c(3,0, 0),
seasonal = list(order = c(0,1,2),
period = 12), xreg = xreg)
modelo_intervenido %>% coeftest()
df2$t_cabezas=df2$t_cabezas
vectores <- c(df2$t_cabezas)
dftimeserie <-ts(vectores, frequency = 12, start = c(2008,10))
reg1 <- ts(reg1, start = start(dftimeserie),
frequency = frequency(dftimeserie)) # hasta aca se tiene 0 y 1 en la intervencion
reg1_new <- window(reg1, start = c(2022,09), end = c(2023,08))
inter.pred = predict(modelo_intervenido, newxreg=reg1_new, n.ahead=12)
inter.pred # Estas son las predicciones
prediccions = inter.pred$pred # serie de tiempo de la prediccion
se = inter.pred$se # para crear los IC
MSE = mean((df2$t_cabezas- fitted.values(modelo_intervenido)))^2
MSE
serie.original = df2$t_cabezas
prediccions = as.data.frame(prediccions)
s1 = df2$t_cabezas # termina en septiembre del 2022
s2 = prediccions #
a1 = ts(s1, frequency = 12, start = c(2008,10))
a2 = ts(s2, frequency = 12, start = c(2022,09))
#Visually evaluate the prediction
autoplot(a1, series="Datos") +
autolayer(a2, series="Predicciones") +
#autolayer(HW2.pred, series="Prediction") +
xlab("Year") + ylab("Total sacrificios (1/100.000)") + ggtitle("Total de sacrifios 2008-2022") + theme_bw()+theme(legend.title = element_blank(),legend.position = "bottom")
